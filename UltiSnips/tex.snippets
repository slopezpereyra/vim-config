global !p
def math():
	return (vim.eval('vimtex#syntax#in_mathzone()') == '1')

endglobal


snippet template "Basic template" b
\documentclass[a4paper, 12pt]{article}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage{amssymb}
\usepackage{newtxtext} \usepackage{newtxmath}
\usepackage{amsmath, amssymb}
\newtheorem{problem}{Problem}
\newtheorem{example}{Example}
\newtheorem{lemma}{Lemma}
\newtheorem{theorem}{Theorem}
\newtheorem{problem}{Problem}
\newtheorem{example}{Example} \newtheorem{definition}{Definition}
\newtheorem{lemma}{Lemma}
\newtheorem{theorem}{Theorem}


\begin{document}

	$0








\end{document}



endsnippet

context "math()"
snippet sup "Supremum" iA 
\text{sup}\\{x, y\\} 
endsnippet

context "math()"
snippet =~ "Thick approx" iA 
\thickapprox 
endsnippet

context "math()"
snippet poset "Poset" iA 
(P, \leq) 
endsnippet

context "math()"
snippet qoset "Poset" iA 
(Q, \leq') 
endsnippet

context "math()"
snippet lor "Logical or" iA 
\lor 
endsnippet

context "math()"
snippet Gr "Graph" iA 
G = (V, E) 
endsnippet

context "math()"
snippet land "Logical and" iA 
\land 
endsnippet

context "math()"
snippet wt "Wide tilde" iA 
\widetilde{ $1 } 
endsnippet

context "math()"
snippet lat "Lattice" iA 
(L, \leq)
endsnippet

context "math()"
snippet bin "Binary" iA 
\propto 
endsnippet

context "math()"
snippet ebi "Equivalence" iA 
~ \ddot{\propto} ~
endsnippet

context "math()"
snippet Om "Omega" iA 
\Omega
endsnippet

context "math()" 
snippet OB "Overbrace" iA 
\overbrace{$1}{}
endsnippet

context "math()"
snippet concat "Concatenation" iA 
\mathop{\subset}_{t=x}^{t=y}
endsnippet

context "math()"
snippet sf "Skip first" iA 
{}^{\curvearrowright}
endsnippet

context "math()"
snippet ll "lambda" iA 
\lambda
endsnippet

context "math()"
snippet sl "Skip last" iA 
{}^{\curvearrowleft}
endsnippet

snippet dd "delta" iA 
\\delta
endsnippet

snippet GG "Gamma" iA 
\\Gamma
endsnippet

snippet gg "Gamma" iA 
\\gamma
endsnippet

snippet uu "Cup" iA 
\cup 
endsnippet

context "math()"
snippet scr "\mathscr" iA 
\mathscr{$1}
endsnippet

snippet SS "Sigma" iA 
\\Sigma
endsnippet

snippet SpS "Sigma" iA 
\Sigma \cup \Sigma_p
endsnippet

snippet sppR "Sigma" iA 
$(\Sigma \cup \Sigma_p)$-p.r.
endsnippet


context "math()"
snippet ss "Sigma" iA 
\\sigma
endsnippet

context "math()"
snippet ee "Var epsilon" iA 
\varepsilon 
endsnippet

context "math()"
snippet db "Double bracket" iA 
[\![ $1 ]\!]
endsnippet

context "math()"
snippet P! "Psi of program" iA
\Psi_{\mathcal{P}}^{n, m, \#}
endsnippet

context "math()"
snippet Ph! "Phi of program" iA
\Phi_{\mathcal{P}}^{n, m, \#}
endsnippet

context "math()"
snippet Ps "Psi" iA 
\Psi
endsnippet

snippet SlS "Sigma language" iA 
\\Sigma^{*}
endsnippet

snippet sM "Sigma mixed" iA 
$\Sigma$-mixed 
endsnippet

snippet sR "Sigma recirsve" iA 
$\Sigma$-recursive 
endsnippet

snippet <- "Left arrow" iA 
\leftarrow 
endsnippet

snippet sE "Sigma enumerable" iA 
$\Sigma$-enumerable 
endsnippet

snippet sT "Sigma total" iA 
$\Sigma$-total 
endsnippet

snippet sC "Sigma computable" iA 
$\Sigma$-computable 
endsnippet

snippet spR "Sigma p.r." iA 
$\Sigma$-p.r. 
endsnippet

snippet oxs "Omega times sigma" iA 
\omega^{n} \times \Sigma^{*m} 
endsnippet

snippet EXC "Excercise section" iA

\small
\begin{quote}

$1

\end{quote}
\normalsize

endsnippet



snippet -!- "Horizontal line in document" iA
\noindent\makebox[\linewidth]{\rule{\paperwidth}{0.4pt}}
endsnippet

snippet bsp "Big space" iA 
~ ~ ~ ~ ~ 
endsnippet

snippet btr "Black triangle" iA 
\\blacktriangle
endsnippet

snippet tf "Therefore" iA
$\\therefore $
endsnippet

context "math()"
snippet tf "Therefore" iA
\\therefore 
endsnippet

snippet $ "Math" iA 
\$$1\$
endsnippet

snippet ii "Italics" iA 
\\textit{$1}
endsnippet

snippet Ss "Sum" iA 
\\sum i 
endsnippet

snippet sji "Math" iA 
\\sum_{j=1}^n $1
endsnippet

snippet trto "Transforms to" iA
\\overset{$1}{\\to}
endsnippet

snippet LL "Bracket" iA
\\lambda $1 \\left[ $2  \\right]
endsnippet

context "math()"
snippet pro "Program set" iA
Pro^{\Sigma}
endsnippet 

snippet aa "Alpha" iA 
\\alpha
endsnippet

context "math()"
snippet eps "Epsilon" iA 
\\epsilon
endsnippet

snippet lda "Lambda" iA 
\\lambda
endsnippet

snippet cbar "Conclusion bar" iA 
\\mathclap{\rule{2cm}{0.4pt}} \\\\
endsnippet

snippet gp "Greek psi" iA 
\\psi
endsnippet

snippet gvt "Var greek psi" iA 
\\varphi
endsnippet

snippet gt "Greek phi" iA 
\\phi
endsnippet

snippet rlp "Right left parentesis" iA 
\\left( $0 \\right)
endsnippet

snippet pset "Power set" iA 
\\mathcal{P}($1)
endsnippet 

snippet << "Left angle" iA 
\\langle 
endsnippet 

snippet >> "Right angle" iA 
\\rangle 
endsnippet 

snippet sbe "Subset equal" iA 
\\subseteq 
endsnippet

snippet pder "Partial derivative" iA
\\frac{\partial $1}{\partial $2}
endsnippet

snippet ~> "Partial order" iA 
\\preceq
endsnippet

snippet pspec "Program specification" iA 
\\{ P \\} ~ S ~ \\{ Q \\}
endsnippet

snippet nsc "Node super-script" iA
^{($1)}
endsnippet

snippet pBig "Big parenthesis" iA
\\Big( $1 \\Big)
endsnippet

snippet pbig "Big parenthesis" iA
\\big( $1 \\big)
endsnippet

snippet 2dvec "Math cal" iA
\\begin{pmatrix} 
	x \\\ y
\\end{pmatrix}
endsnippet

snippet lprop "Logical proposition" iA
\\langle $1 : $2 : $3 \\rangle
endsnippet

snippet 3dvec "Math cal" iA
\\begin{pmatrix} 
	x \\\ y \\\ z
\\end{pmatrix}
endsnippet


snippet 4dvec "Math cal" iA
\\begin{pmatrix} 
	x \\\ y \\\ z \\\ w
\\end{pmatrix}
endsnippet

snippet 5dvec "Math cal" iA
\\begin{pmatrix} 
	x \\\ y \\\ z \\\ u \\\ w
\\end{pmatrix}
endsnippet


snippet mcal "Math cal" iA
\\mathcal{$1}
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet


priority 100
snippet mbset "Big Formal set" iA
\\Big\\{$1\\Big\\}
endsnippet

priority 100
snippet mset "Formal set" iA
\\{$1\\}
endsnippet

priority 100
snippet mbb "Math BB" iA
\mathbb{$1}
endsnippet


priority 100
snippet tbf "bold" iA
\\textbf{$1}
endsnippet


priority 100
snippet ... "ldots" iA
\ldots
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet => "implies" Ai
\Rightarrow
endsnippet

snippet mpq "Max pq" Ai 
\\langle Max ~ p, q : 0 \\leq p < q < n : a.p - a.q \\rangle
endsnippet

snippet =< "implied by" Ai
\Leftarrow
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

context "math()"
snippet vec "vector" iA 
\\overrightarrow{$1}
endsnippet

snippet xA "(x, alpha)" iA 
(\vec{x}, \vec{\alpha}) 
endsnippet

snippet vd "vdash" iA 
\vdash 
endsnippet

context "math()"
snippet omm "omega" iA 
\\omega
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
.\] $0
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
\end{align*}
endsnippet


context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

snippet == "equals" iA
&= $1 \\\\
endsnippet

snippet != "equals" iA
\neq 
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix}
	$1
\end{pmatrix} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} 
		$1 
\end{bmatrix} $0
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr1 "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr3 "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr2 "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

snippet sum "sum" w
\sum_{i=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet



snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

snippet XX "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sqr "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet <= "leq" iA
\le 
endsnippet

context "math()"
snippet >= "geq" iA
\geq
endsnippet

context "math()"
snippet EE "geq" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet


context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

snippet R0+ "R0+" iA
\\R_0^+
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

snippet lll "l" iA
\ell
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla 
endsnippet


context "math()"
snippet bsq "black square" iA
\\blacksquare
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

priority 100
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet


priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

snippet ltc "Lattice" iA 
\\langle ~L, ~\\hat{\\lor}~, ~\\hat{\\land}~ \\rangle
endsnippet
snippet supm "Supremum" iA 
~\\hat{\\lor}~
endsnippet

snippet infm "Supremum" iA 
~\\hat{\\land}~
endsnippet

context "math()"
snippet mu "μ" iA 
\mu
endsnippet

context "math()"
snippet th "theta" iA 
\theta
endsnippet

snippet ~~ "~" iA
\sim 
endsnippet

snippet _> "Short implies" iA
\\Rightarrow 
endsnippet

snippet || "mid" iA
 \mid 
endsnippet


context "math()"
snippet cc "subset" Ai
\subset 
endsnippet

snippet notin "not in " iA
\not\in 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

snippet NN "n" iA
\N
endsnippet

context "math()"
snippet cap "cap" iA
\cap 
endsnippet

snippet bCap "cap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

snippet OO "emptyset" iA
\emptyset
endsnippet

snippet RR "real" iA
\R
endsnippet

snippet QQ "Q" iA
\Q
endsnippet

snippet ZZ "Z" iA
\Z
endsnippet

snippet <! "normal" iA
\triangleleft 
endsnippet

snippet tr> "normal" iA
\\triangleright 
endsnippet

snippet x:xs "List" iA 
x \\triangleright xs
endsnippet

snippet ~= "equivalent" iA 
\\equiv
endsnippet

snippet <> "hokje" iA
\diamond 
endsnippet


context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet SI "SI" iA
\SI{$1}{$2}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

context "math()"
snippet bar "overline" iA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet letw "let omega" iA
Let $\Omega \subset \C$ be open.
endsnippet


snippet HH "H" iA
\mathbb{H}
endsnippet

snippet DD "D" iA
\mathbb{D}
endsnippet

snippet aX "Axiom" iA 
\\AxiomC{\$ $1 \$}
endsnippet

snippet binf "Binary inference" iA 
\\BinaryInfC{\$ $1 \$}
endsnippet

snippet uinf "Unary inference" iA 
\\UnaryInfC{\$ $1 \$}
endsnippet

snippet tinf "Trinary inference" iA 
\\TrinaryInfC{\$ $1 \$}
endsnippet

snippet rlb "Right label" iA 
\\RightLabel{\\scriptsize($1)}
endsnippet

# vim:ft=snippets
